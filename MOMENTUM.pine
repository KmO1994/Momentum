//@version = 4
//                                                                              STUDY/STRATEGY SETTINGS
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
strategy( title="✖ 𝗠𝗼𝗺𝗲𝗻𝘁𝘂𝗺" , shorttitle="✖ 𝗠𝗼𝗺𝗲𝗻𝘁𝘂𝗺" , overlay=false , format=format.price , precision=6  ,initial_capital=25000, commission_value=0.2, commission_type=strategy.commission.percent)
//                                                                              COLORSPACE
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
invisible		        = #00000000
//                                                                              INPUTS
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//                                                              MODUS
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
MODUS                   = input(title="Display", defval="Scope", options=["Scope","Weighting","Triggering","Position","OpenInterest","Drawdown","PNL"])

//                                                              TIME
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//TIME_SESSION            = input("0",type=input.session, title = "Sessions")
TIME_DATE_START         = input(defval = timestamp("21 Mar 2010 12:00 +0000"), title = "Start Time", type = input.time)
TIME_DATE_END           = input(defval = timestamp("16 Aug 2022 00:00 +0000"), title = "End Time", type = input.time)
TIME_ALLOW              = time >= TIME_DATE_START and time <= TIME_DATE_END //and time(timeframe.period, TIME_SESSION)

//                                                              SCOPE
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
SCOPE_GRADATION         = input( defval="Logarithmic"    , options=["Linear", "Logarithmic"]                                    , title="Scalar Gradation"      )
SCOPE_RATIO			    = input( defval=1.2         , minval=1.000              , step=0.005            , type=input.float      , title="Scalar Ratio"          )	
SCOPE_MAX               = input( defval=4400.0      , minval=128.0              , step=100.0            , type=input.float      , title="Scalar Maximum"        ) * SCOPE_RATIO
SCOPE_MIN               = iff( SCOPE_GRADATION == "Linear" , SCOPE_MAX / 32 , SCOPE_MAX / pow( SCOPE_RATIO , 32 ) )

//                                                              TRIGGERING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
PULSE_LENGHT            = 32 //input( defval=32          , minval=0.0                , step=2                , type=input.float      , title="Pulse momentum"        ) // REPRESENTS ITERATE SHOWN IN SCOPE, NOT PULSE LENGHT
PULSE_HI			    = input( defval=0.25        , minval=0.0                , step=0.05             , type=input.float      , title="Pulse High"            ) // REPLACE WITH RANGE, APPLY BIAS WITH TRENDING TRANSFORMATION
PULSE_LO			    = input( defval=-0.25       , maxval=0.0                , step=0.05             , type=input.float      , title="Pulse Low"             ) 

//                                                              TRENDING CORRECTION TEST
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
a   			        = input( defval=0.000        , minval=-1,maxval=1              , step=0.005            , type=input.float      , title="a"          )	
    

//                                                                              FUNCTIONS
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//                                                              AVERAGING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//                      ROLLING MOVING AVERAGE
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
RMA( SERIES , LENGHT )=>
	ALPHA               = 1 / LENGHT
    float SUM           = na
    SUM                 := ALPHA * SERIES + ( 1.0 - ALPHA ) * nz( SUM[1] )
    
//                                                              INDEXING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//                      AUGMENTED RELATIVE MOMENTUM INDEX
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
ARMI( SOURCE , LENGHT , MOMENTUM )=> // USES LINEAR VALUES , MAKE WITH LOG VALUES LIKE CHART SCALING
    INC                 = RMA( max( SOURCE                  - sma(SOURCE,MOMENTUM*2), 0 )    , LENGHT)
    DEC                 = RMA( max( sma(SOURCE,MOMENTUM*2)  - SOURCE                , 0 )    , LENGHT)
    RMI                 = DEC   == 0.0  ? 0.0     : -(INC-DEC)/(INC+DEC)

//                                                              GRAPHICAL
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//                      SCALAR Y VALUE
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
SCALAR( ITERATION )=>
    iff( SCOPE_GRADATION == "Linear" , ( SCOPE_MAX - (( SCOPE_MAX / 32 ) * ITERATION)) / SCOPE_RATIO , SCOPE_MAX / pow( SCOPE_RATIO , ITERATION ) )

//                      TREND CORRECTION
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
TRENDING(y,a)=>
    b = a == 0 ? 1 : a / abs(a)
    x = ((2*(pow((y+1)/2,-b*(pow(a-b,-b))))-1) + -(2*(pow((-y+1)/2,b*(pow(b-a,b))))-1))/2
    
//                      PIXELING
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
PIXEL( SOURCE , ITERATION )=> 
	LENGHT              = SCALAR( ITERATION )
	return              = TRENDING(ARMI( SOURCE , LENGHT , int( LENGHT / 10 ) ),a)//ARMI( SOURCE , LENGHT , int( LENGHT / 10 ) )//

//                      SHADING
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
SHADE(x)=>
    out                 = x>0.96875?#ffa9e0FF:x>0.9375?#ffa6dcF0:x>0.90625?#fe9ed8E8:x>0.875?#fc97d1E0:x>0.84375?#fa90caD8:x>0.8125?#fa8bc3D0:x>0.78125?#f37db0C8:x>0.75?#ee74a3C0:x>0.71875?#e96d98B8:x>0.6875?#e46890B0:x>0.65625?#db6083A8:x>0.625?#d65a7aA0:x>0.59375?#cb506c98:x>0.5625?#c44a6390:x>0.53125?#ba465b88:x>0.5?#b6475a80:x>0.46875?#b14a5d78:x>0.4375?#ae4d5e70:x>0.40625?#aa506168:x>0.375?#a7536360:x>0.34375?#a3576658:x>0.3125?#9f5a6750:x>0.28125?#9b5e6a48:x>0.25?#97616c40:x>0.21875?#94646d38:x>0.1875?#8f677030:x>0.15625?#8c6a7128:x>0.125?#896d7220:x>0.09375?#86707518:x>0.0625?#84737610:x>0.03125?#80767908:x<-0.96875?#b9fdceFF:x<-0.9375?#affcc9F0:x<-0.90625?#a6fac5E8:x<-0.875?#9cf7c1E0:x<-0.84375?#90f3baD8:x<-0.8125?#87f0b6D0:x<-0.78125?#7aeab1C8:x<-0.75?#71e5adC0:x<-0.71875?#67e0abB8:x<-0.6875?#5dd9a4B0:x<-0.65625?#55d29fA8:x<-0.625?#50cc9dA0:x<-0.59375?#4ac59a98:x<-0.5625?#46be9790:x<-0.53125?#44b79588:x<-0.5?#48b39480:x<-0.46875?#4baf9278:x<-0.4375?#4fab9070:x<-0.40625?#52a88f68:x<-0.375?#55a48e60:x<-0.34375?#599f8c58:x<-0.3125?#5d9c8b50:x<-0.28125?#60988948:x<-0.25?#63938740:x<-0.21875?#678f8438:x<-0.1875?#67908530:x<-0.15625?#6e888128:x<-0.125?#6e888120:x<-0.09375?#74827f18:x<-0.0625?#75817d10:x<-0.03125?#7b7b7b08:invisible

//                                                              VALUATION
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//                      GRADING
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
GRADE( iterate )=>
    iterate == 1 ? 2 : iterate == 2 ? 2.4 : iterate == 3 ? 2.8 : iterate == 4 ? 3.2 : iterate == 5 ? 3.4 : iterate == 6 ? 3.2 : iterate == 7 ? 3.0 : iterate == 8 ? 2.8 : iterate == 9 ? 2.6 : iterate == 10 ? 2.4 : iterate == 11 ? 2.2 : iterate == 12 ? 2.0 : iterate == 13 ? 1.85 : iterate == 12 ? 1.7 : iterate == 13 ? 1.6 : iterate == 12 ? 1.4 : iterate == 13 ? 1.3 : iterate == 14 ? 1.1 : iterate == 15 ? 1 : iterate == 16 ? 0.9 : iterate == 17 ? 0.8 : iterate == 18 ? 0.7 : iterate == 19 ? 0.6 : iterate == 20 ? 0.5 : iterate == 21 ? 0.4 : iterate == 22 ? 0.3 : iterate == 23 ? 0.2 : iterate == 24 ? 0.1 : iterate > 24 ? 0 : 0

//                      VALUATE
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
VALUATE( Series )=>
    floorvalue          = 0.0
    posvalue            = 0.0
    negvalue            = 0.0
    
    for i=1 to 25 // 1 to and 24, is to 25
        a = PIXEL( Series , i )
        posvalue := posvalue + ( (a>0?a:0) * GRADE(i) )
        negvalue := negvalue + ( (a<0?a:0) * GRADE(i) )
        
    floorvalue          := PIXEL( close , 32 ) > 0 ? pow(posvalue,2) : - pow(negvalue,2)


//                                                                              STRATEGY
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//                                                              WEIGHTING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
TVAL                    = strategy.initial_capital
XVAL                    = -VALUATE(close)                            // NEEDS TO VALUATE FROM NEUTRAL TO UP, NOT ALL
float ACCOUNT_PERCENT   = 1
ACCOUNT_PERCENT         := fixnan(ACCOUNT_PERCENT[1])
XVAL                    := XVAL * ACCOUNT_PERCENT

//                                                              TRIGGERING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
PULSE                   = PIXEL( close , PULSE_LENGHT )
LONG                    = PULSE > PULSE_HI ? true : false
SHORT                   = PULSE < PULSE_LO ? true : false

//                                                              POSITIONING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
float CONTRACTS_OPEN_USD        = na
CONTRACTS_OPEN_USD              := nz(CONTRACTS_OPEN_USD[1])

float CONTRACTS_OPEN_BTC        = na
CONTRACTS_OPEN_BTC              := nz(CONTRACTS_OPEN_BTC[1])

float CONTRACTS_OPEN_USDX        = na
CONTRACTS_OPEN_USDX              := nz(CONTRACTS_OPEN_USDX[1])

string POSITION_STATUS          = CONTRACTS_OPEN_BTC > 0 ? "LONG" : CONTRACTS_OPEN_BTC < 0 ? "SHORT" : "NULL"
float  POSITION_SIZE_BTC        = CONTRACTS_OPEN_BTC

float POSITION_AVG_PRICE        = na
POSITION_AVG_PRICE              := nz(POSITION_AVG_PRICE[1])

float PROFITS                   = na
PROFITS                         := nz(PROFITS[1])

if (TIME_ALLOW and LONG and POSITION_STATUS == "NULL") //ADD TO POSITION
    CONTRACTS_OPEN_USD          := CONTRACTS_OPEN_USD + abs(XVAL)
    CONTRACTS_OPEN_BTC          := CONTRACTS_OPEN_BTC + abs(XVAL/close)
if (TIME_ALLOW and LONG and POSITION_STATUS == "LONG") //ADD TO POSITION
    CONTRACTS_OPEN_USD          := CONTRACTS_OPEN_USD + abs(XVAL)
    CONTRACTS_OPEN_BTC          := CONTRACTS_OPEN_BTC + abs(XVAL/close)
    
if (TIME_ALLOW and LONG and POSITION_STATUS == "SHORT" and abs(XVAL/close) < abs(POSITION_SIZE_BTC)) // REDUCE POSITION
    CONTRACTS_OPEN_BTC          := CONTRACTS_OPEN_BTC + abs(XVAL/close)
    CONTRACTS_OPEN_USD          := CONTRACTS_OPEN_BTC * POSITION_AVG_PRICE
    
if (TIME_ALLOW and LONG and POSITION_STATUS == "SHORT" and abs(XVAL/close) > abs(POSITION_SIZE_BTC)) // CLOSE AND OPEN OPPOSITE POSITION WITH REMAINDER
    OVERHEAD_BTC                = POSITION_SIZE_BTC - abs(XVAL/close)
    OVERHEAD_USD                = OVERHEAD_BTC * close
    CONTRACTS_OPEN_USD          := 0 - OVERHEAD_USD
    CONTRACTS_OPEN_BTC          := 0 - OVERHEAD_BTC
    
if (TIME_ALLOW and LONG and POSITION_STATUS == "SHORT" and abs(XVAL/close) == abs(POSITION_SIZE_BTC)) // CLOSE POSITION
    CONTRACTS_OPEN_USD          := 0
    CONTRACTS_OPEN_BTC          := 0

if (TIME_ALLOW and SHORT and POSITION_STATUS == "NULL") //ADD TO POSITION
    CONTRACTS_OPEN_USD          := CONTRACTS_OPEN_USD - abs(XVAL)
    CONTRACTS_OPEN_BTC          := CONTRACTS_OPEN_BTC - abs(XVAL/close)
if (TIME_ALLOW and SHORT and POSITION_STATUS == "SHORT") //ADD TO POSITION
    CONTRACTS_OPEN_USD          := CONTRACTS_OPEN_USD - abs(XVAL)
    CONTRACTS_OPEN_BTC          := CONTRACTS_OPEN_BTC - abs(XVAL/close)
    
if (TIME_ALLOW and SHORT and POSITION_STATUS == "LONG" and abs(XVAL/close) < abs(POSITION_SIZE_BTC)) // REDUCE POSITION
    CONTRACTS_OPEN_BTC          := CONTRACTS_OPEN_BTC - abs(XVAL/close)
    CONTRACTS_OPEN_USD          := CONTRACTS_OPEN_BTC * POSITION_AVG_PRICE
    
if (TIME_ALLOW and SHORT and POSITION_STATUS == "LONG" and abs(XVAL/close) > abs(POSITION_SIZE_BTC)) // CLOSE AND OPEN OPPOSITE POSITION WITH REMAINDER
    OVERHEAD_BTC                = abs(XVAL/close) - POSITION_SIZE_BTC
    OVERHEAD_USD                = OVERHEAD_BTC * close
    CONTRACTS_OPEN_USD          := 0 - OVERHEAD_USD
    CONTRACTS_OPEN_BTC          := 0 - OVERHEAD_BTC
    
if (TIME_ALLOW and SHORT and POSITION_STATUS == "LONG" and abs(XVAL/close) == abs(POSITION_SIZE_BTC)) // CLOSE POSITION
    CONTRACTS_OPEN_USD          := 0
    CONTRACTS_OPEN_BTC          := 0

if (TIME_ALLOW and SHORT)
    CONTRACTS_OPEN_USDX         := CONTRACTS_OPEN_USDX - abs(XVAL)
if (TIME_ALLOW and LONG)
    CONTRACTS_OPEN_USDX         := CONTRACTS_OPEN_USDX + abs(XVAL)


POSITION_AVG_PRICE              := CONTRACTS_OPEN_USD / CONTRACTS_OPEN_BTC // ICLUDES PROFITS

//                                                              ACCOUNT
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒   

ACCOUNT_NET_PROFIT              = CONTRACTS_OPEN_USD - CONTRACTS_OPEN_USDX
ACCOUNT_NET_PROFIT_CHANGE       = ACCOUNT_NET_PROFIT > ACCOUNT_NET_PROFIT[1] ? #00AA88CC  : ACCOUNT_NET_PROFIT < ACCOUNT_NET_PROFIT[1] ? color.red : #00000000
ACCOUNT_TOTAL                   = strategy.initial_capital + ACCOUNT_NET_PROFIT
ACCOUNT_PERCENT                 := ACCOUNT_TOTAL / strategy.initial_capital

//                                                              EXECUTION
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    
if (TIME_ALLOW and LONG)
    strategy.order  ("long",true,abs(XVAL/close))

if (TIME_ALLOW and SHORT)
    strategy.order  ("short",false,abs(XVAL/close))



//                                                                              VISUALIZATION
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//                                                              SCOPE
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

//                                                              TRIGGERING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// plotshape(TIME_ALLOW and LONG[1] and MODUS == "Position", color=color.blue, style=shape.triangleup,size=size.tiny, location=location.belowbar)
// plotshape(TIME_ALLOW and SHORT[1] and MODUS == "Position", color=color.red, style=shape.triangledown,size=size.tiny, location=location.abovebar)

float longprice             = na
longprice                   := iff(TIME_ALLOW and MODUS == "Position" and LONG[1], open, na)
float shortprice            = na
shortprice                  := iff(TIME_ALLOW and MODUS == "Position" and SHORT[1], open, na)
plotcandle(longprice*1.001,longprice*1.001,longprice*0.999,longprice*0.999,title="Long",color=#2962ff,bordercolor=#2962ff,wickcolor=#2962ff)
plotcandle(shortprice *1.001,shortprice *1.001,shortprice *0.999,shortprice *0.999,title="Short",color=color.red,bordercolor=color.red,wickcolor=color.red)

//                                                              WEIGHTING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
PVAL                        = plot(iff(MODUS == "Weighting",XVAL/close,na), color=color.gray,title='VALUE', offset=1)
ZVAL                        = plot(iff(MODUS == "Weighting",0,na),color=#FFFFFF00)
ICOL                        = XVAL < 0 ? color.green : color.red
fill( PVAL , ZVAL , color=ICOL)

//                                                              POSITION
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
PSP                         = POSITION_STATUS == "LONG" ? color.blue : color.red
PAP                         = plot(   iff(MODUS == "Position",POSITION_AVG_PRICE,na)     , color=PSP , style=plot.style_stepline, linewidth=2 , offset=1)
PCP                         = plot(   iff(MODUS == "Position",close,na)     , color=#00000000 , style=plot.style_stepline, offset=1)
PWP                         = POSITION_STATUS == "LONG" ? POSITION_AVG_PRICE < close ? color.green : color.red : POSITION_STATUS == "SHORT" ? POSITION_AVG_PRICE > close ? color.green : color.red : color.purple //POSITION_AVG_PRICE > close ? color.green : color.red
fill( PAP , PCP , color=PWP)

//                                                              OPENINTEREST
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
LEVERAGE = CONTRACTS_OPEN_USD / ACCOUNT_TOTAL
// plot(   iff(MODUS == "OpenInterest",CONTRACTS_OPEN_USD,na)       , color=#00AA88CC   , style= plot.style_stepline, offset=1)

POI = plot(   iff(MODUS == "OpenInterest",LEVERAGE,na)     , color=PSP , style=plot.style_stepline, linewidth=2 , offset=1)
PZE = plot( iff(MODUS == "OpenInterest",0,na) , color=#00000000)
fill( POI , PZE , color=PWP)
//plot(   iff(MODUS == "OpenInterest",CONTRACTS_OPEN_USDX,na)       , color=#AAAA88CC   , style= plot.style_stepline, offset=1)
// plot(   iff(MODUS == "OpenInterest",CONTRACTS_OPEN_BTC,na)       , color=#CC8800CC   , style= plot.style_stepline, offset=1)

//                                                              DRAWDOWN
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ // USE LOW AND HIGH NOT CLOSED FOR EXTREMA 
DRAW                        = POSITION_STATUS == "LONG" ? close / POSITION_AVG_PRICE : POSITION_AVG_PRICE / close
plot(   iff(MODUS == "Drawdown",DRAW,na)       , color=#00AA88CC   , style= plot.style_stepline, offset=1,trackprice=true)
plot(   iff(MODUS == "Drawdown",1,na)       , color=#00AA88CC   , style= plot.style_stepline, offset=1,trackprice=true)
DRAWLINE                    = lowest(DRAW,1)
DRAWLINE                    := DRAWLINE[1] > DRAWLINE ? DRAWLINE : DRAWLINE[1] < DRAWLINE ? DRAWLINE[1] : DRAWLINE
plot(iff(MODUS == "Drawdown",DRAWLINE,na), color=#00AA88CC,trackprice=true, show_last=1)
DRAWDOWN                    = round( ( 1 - DRAWLINE) * 100 , 2) 
DRAWDOWNLABEL               = label.new( iff(MODUS == "Drawdown",bar_index ,na), DRAWLINE , 'Max Drawdown from position '+tostring(DRAWDOWN)+'%', color=#00AA8888, textcolor=color.white ,style=label.style_labeldown , yloc=yloc.price )
label.delete(DRAWDOWNLABEL[1])

float DRAWCOUNT             = 0
DRAWCOUNT                   := na(DRAW) ?  DRAWCOUNT : DRAWCOUNT[1]  + 1

DRAWAVG                     = cum(DRAW) / DRAWCOUNT
plot(iff(MODUS == "Drawdown",DRAWAVG,na), color=#FFAA88CC)
//                                                              PROFITNLOSS
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

ACCOUNT_PROFIT_PLOT         = plot(iff(MODUS == "PNL",ACCOUNT_NET_PROFIT,na)       , color=color.gray  , style= plot.style_stepline, linewidth=1, offset=1)
ACCOUNT_ZERO_PLOT           = plot(iff(MODUS == "PNL",0,na)       , color=color.gray  , style= plot.style_stepline, linewidth=1, offset=1)
ACCOUNT_INITIAL_PLOT        = plot(iff(MODUS == "PNL",0 - strategy.initial_capital,na)       , color=color.white  , style= plot.style_stepline, linewidth=1, offset=1)
fill(ACCOUNT_PROFIT_PLOT,ACCOUNT_ZERO_PLOT, color=ACCOUNT_NET_PROFIT_CHANGE,transp=0)
